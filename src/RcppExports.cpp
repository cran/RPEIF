// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IF_mean
arma::vec IF_mean(const arma::vec& returns);
RcppExport SEXP _RPEIF_IF_mean(SEXP returnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_mean(returns));
    return rcpp_result_gen;
END_RCPP
}
// IF_SD
arma::vec IF_SD(const arma::vec& returns);
RcppExport SEXP _RPEIF_IF_SD(SEXP returnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_SD(returns));
    return rcpp_result_gen;
END_RCPP
}
// IF_SR
arma::vec IF_SR(const arma::vec& returns, const double& rf);
RcppExport SEXP _RPEIF_IF_SR(SEXP returnsSEXP, SEXP rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const double& >::type rf(rfSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_SR(returns, rf));
    return rcpp_result_gen;
END_RCPP
}
// IF_SoR_mean
arma::vec IF_SoR_mean(const arma::vec& returns, const double& rf);
RcppExport SEXP _RPEIF_IF_SoR_mean(SEXP returnsSEXP, SEXP rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const double& >::type rf(rfSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_SoR_mean(returns, rf));
    return rcpp_result_gen;
END_RCPP
}
// IF_OmegaRatio
arma::vec IF_OmegaRatio(const arma::vec& returns, const double& cst);
RcppExport SEXP _RPEIF_IF_OmegaRatio(SEXP returnsSEXP, SEXP cstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const double& >::type cst(cstSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_OmegaRatio(returns, cst));
    return rcpp_result_gen;
END_RCPP
}
// IF_SSD
arma::vec IF_SSD(const arma::vec& returns, const double& rf);
RcppExport SEXP _RPEIF_IF_SSD(SEXP returnsSEXP, SEXP rfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< const double& >::type rf(rfSEXP);
    rcpp_result_gen = Rcpp::wrap(IF_SSD(returns, rf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RPEIF_IF_mean", (DL_FUNC) &_RPEIF_IF_mean, 1},
    {"_RPEIF_IF_SD", (DL_FUNC) &_RPEIF_IF_SD, 1},
    {"_RPEIF_IF_SR", (DL_FUNC) &_RPEIF_IF_SR, 2},
    {"_RPEIF_IF_SoR_mean", (DL_FUNC) &_RPEIF_IF_SoR_mean, 2},
    {"_RPEIF_IF_OmegaRatio", (DL_FUNC) &_RPEIF_IF_OmegaRatio, 2},
    {"_RPEIF_IF_SSD", (DL_FUNC) &_RPEIF_IF_SSD, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RPEIF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
